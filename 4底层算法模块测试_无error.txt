using System;
using System.Collections.Generic;
using System.Text;

namespace text
{
    class Class1
    {
    static void Main(String []args)//底层算法测试
        {
            //构件
            Component c1 = new Component();
            c1.Floor = 1;
            c1.Category = 1;
            c1.Amount = 100;
            Component c2 = new Component();
            c2.Floor = 1;
            c2.Category = 2;
            c2.Amount = 100;
            Component c3 = new Component();
            c3.Floor = 1;
            c3.Category = 3;
            c3.Amount = 100;
            List<Component> c = new List<Component>();
            c.Add(c1);
            c.Add(c2);
            c.Add(c3);

            //楼栋
            Building b1 = new Building();
            b1.ID = 1;
            b1.Name = "楼栋一";
            b1.Components = c;
            b1.CompletedTime = DateTime.Now;
            List<Building> b = new List<Building>();
            b.Add(b1);

            //项目
            Project p1 = new Project();
            p1.ID = 1;
            p1.Name = "项目1";
            p1.Buildings = b;
            p1.CompletedTime = DateTime.Now;
            List<Project> p = new List<Project>();
            p.Add(p1);

            //批次
            BatchTask bt1 = new BatchTask();
            bt1.ID = 1;
            bt1.Name = "批次一";
            bt1.Projects = p;
            bt1.CompletedTime = DateTime.Now;

            //流水节拍
            FlowInterval F = new FlowInterval();
            F.wWallBeat = 2;
            F.wnWallBeat = 3;
            F.nWallBeat = 2;
            F.gwWallBeat = 3;
            F.gnWallBeat = 3;
            F.gWallBeat = 1;

            F.wMouldAmount = 1000;
            F.wMouldReturnTime = 0;
            F.nMouldAmount = 1000;
            F.nMouldReturnTime = 0;
            F.gMouldAmount = 1000;
            F.gMouldReturnTime = 0;

            //约束
            LimitedCondition L = new LimitedCondition();
            L.Flowinterval = F;
            L.SCXw = 3;
            L.SCXn = 2;
            L.SCXg = 2;
            L.wWorkPositionAmount = 30;
            L.nWorkPositionAmount = 28;
            L.gWorkPositionAmount = 28;

            //测试
            Class1 text1 = new Class1();
            DateTime now = DateTime.Now;
            int s = text1.CoreFunc(text1.GJHQ(1,1,bt1,0,0),text1.CNSF(L),L,now).Length;
            for(int i=0;i<s;i++)
            {
                Console.WriteLine(text1.CoreFunc(text1.GJHQ(1, 1, bt1, 0, 0), text1.CNSF(L), L, now)[i]);
            }
            Console.ReadLine();
        }
        public double min3(double T1, double T2, double T3)//比较最小时间
        {
            double[] score = new double[3];
            score[0] = T1;
            score[1] = T2;
            score[2] = T3;
            double min = T1;
            for (int i = 1; i < 3; i++)
            {
                if (score[i] < min)
                    min = score[i];
            }
            return min;
        }
        public double[] CoreFunc(double[] GJ, double[] PP, LimitedCondition L, DateTime starttime)//底层算法
        {
            /*三种生产线对应一小时的产能*/
            double P11, P12;
            double P22;
            double P31, P32, P33;

            P11 = PP[0];
            P12 = PP[1];
            P22 = PP[2];
            P31 = PP[3];
            P32 = PP[4];
            P33 = PP[5];

            double T1 = GJ[0] / (P11 * L.SCXw); //外墙生产线生产外墙的产能*生产线条数
            double T2 = GJ[1] / (P22 * L.SCXn); //内墙生产线生产内墙的产能*生产线条数
            double T3 = GJ[2] / (P33 * L.SCXg); //固定模台生产线生产异形构件的产能*生产线条数

            double T11 = 1 / (P11 * L.SCXw); //外墙生产线生产一个外墙的时间
            double T12 = 1 / (P12 * L.SCXn); //外墙生产线生产一个内墙的时间
            double T22 = 1 / (P22 * L.SCXn); //内墙生产线生产一个内墙的时间
            double T31 = 1 / (P31 * L.SCXg); //固定模台生产线生产一个外墙的时间
            double T32 = 1 / (P32 * L.SCXg); //固定模台生产线生产一个内墙的时间
            double T33 = 1 / (P33 * L.SCXg); //固定模台生产线生产一个异形构件的时间

            double Tm;
            double Tmin = min3(T1, T2, T3);

            //各条生产线生产构件的数量;
            double[] gp = new double[13];
            //下13行仅用于参考 以免遗忘意义
            double g1p1 = gp[0];
            double g2p1 = gp[1];
            double g2p2 = gp[2];
            double g1p3 = gp[3];
            double g2p3 = gp[4];
            double g3p3 = gp[5];
            double shijian = gp[6];
            double t11 = gp[7];
            double t12 = gp[8];
            double t22 = gp[9];
            double t31 = gp[10];
            double t32 = gp[11];
            double t33 = gp[12];
            //判断与输出
            if (T1 == Tmin)
            {
                if (T2 >= T3)
                {
                    int numtemp1 = (int)((T3 - T1) * (P12 * L.SCXw) + T3 * (P22 * L.SCXn));

                    if (numtemp1 > GJ[1])//GJ[1]是内墙总数;
                    {
                        Tm = T3;
                        gp[0] = (int)GJ[0];
                        gp[1] = (int)((T3 - T1) / T12);
                        gp[2] = (int)(GJ[1] - gp[1]);
                        gp[3] = 0;
                        gp[4] = 0;
                        gp[5] = (int)GJ[2];
                        gp[6] = Tm;
                        gp[7] = T11;
                        gp[8] = T12;
                        gp[9] = T22;
                        gp[10] = T31;
                        gp[11] = T32;
                        gp[12] = T33;
                        return gp;

                    }
                    else
                    {
                        Tm = T3 + (GJ[1] - numtemp1) / (P12 * L.SCXw + P22 * L.SCXn + P32 * L.SCXg);
                        gp[0] = (int)GJ[0];
                        gp[1] = (int)((Tm - T1) / T12);
                        gp[2] = (int)(Tm / T22);
                        gp[3] = 0;
                        gp[4] = (int)((Tm - T3) / T32);
                        gp[5] = (int)GJ[2];
                        gp[6] = Tm;
                        gp[7] = T11;
                        gp[8] = T12;
                        gp[9] = T22;
                        gp[10] = T31;
                        gp[11] = T32;
                        gp[12] = T33;
                        return gp;
                    }

                }
                else
                {
                    Tm = T3;
                    gp[0] = (int)GJ[0];
                    gp[1] = 0;
                    gp[2] = (int)GJ[1];
                    gp[3] = 0;
                    gp[4] = 0;
                    gp[5] = (int)GJ[2];
                    gp[6] = Tm;
                    gp[7] = T11;
                    gp[8] = T12;
                    gp[9] = T22;
                    gp[10] = T31;
                    gp[11] = T32;
                    gp[12] = T33;
                    return gp;
                }
            }
            if (T2 == Tmin)
            {
                if (T1 >= T3)
                {
                    Tm = T3 + (GJ[0] - T3 * P11 * L.SCXw) / (P11 * L.SCXw + P31 * L.SCXg);
                    gp[0] = (int)(Tm / T11);
                    gp[1] = 0;
                    gp[2] = (int)GJ[1];
                    gp[3] = (int)((Tm - T3) / T31);
                    gp[4] = 0;
                    gp[5] = (int)GJ[2];
                    gp[6] = Tm;
                    gp[7] = T11;
                    gp[8] = T12;
                    gp[9] = T22;
                    gp[10] = T31;
                    gp[11] = T32;
                    gp[12] = T33;
                    return gp;
                }
                else
                {
                    Tm = T3;
                    gp[0] = (int)GJ[0];
                    gp[1] = 0;
                    gp[2] = (int)GJ[1];
                    gp[3] = 0;
                    gp[4] = 0;
                    gp[5] = (int)GJ[2];
                    gp[6] = Tm;
                    gp[7] = T11;
                    gp[8] = T12;
                    gp[9] = T22;
                    gp[10] = T31;
                    gp[11] = T32;
                    gp[12] = T33;
                    return gp;
                }
            }
            if (T3 == Tmin)
            {
                if (T1 <= T2)
                {
                    double numtemp2 = GJ[1] - T3 * P22 * L.SCXn;
                    double T4 = numtemp2 / (P22 * L.SCXn + P32 * L.SCXg);
                    if (T4 <= T1 - T3)
                    {
                        double T5 = T1 - T3 - T4;
                        Tm = T3 + T4 + (T5 * P11 * L.SCXw) / (P11 * L.SCXw + P31 * L.SCXg);
                        gp[0] = (int)(Tm / T11);
                        gp[1] = 0;
                        gp[2] = (int)((T3 + T4) / T22);
                        gp[3] = (int)(T5 / T31);
                        gp[4] = (int)(T4 / T32);
                        gp[5] = (int)GJ[2];
                        gp[6] = Tm;
                        gp[7] = T11;
                        gp[8] = T12;
                        gp[9] = T22;
                        gp[10] = T31;
                        gp[11] = T32;
                        gp[12] = T33;
                        return gp;
                    }
                    else
                    {
                        Tm = T4 + T3;
                        gp[0] = (int)GJ[0];
                        gp[1] = 0;
                        gp[2] = (int)((T3 + T4) / T22);
                        gp[3] = 0;
                        gp[4] = (int)(T4 / T32);
                        gp[5] = (int)GJ[2];
                        gp[6] = Tm;
                        gp[7] = T11;
                        gp[8] = T12;
                        gp[9] = T22;
                        gp[10] = T31;
                        gp[11] = T32;
                        gp[12] = T33;
                        return gp;
                    }
                }
                if (T1 >= T2)
                {
                    double numtemp2 = GJ[0] - T3 * P11 * L.SCXw;
                    double T4 = numtemp2 / (P11 * L.SCXw + P31 * L.SCXg);
                    if (T4 <= T2 - T3)
                    {
                        double T5 = T2 - T3 - T4;
                        Tm = T3 + T4 + (T5 * P22 * L.SCXn) / (P12 * L.SCXw + P22 * L.SCXn + P32 * L.SCXg);
                        gp[0] = (int)((T3 + T4) / T11);
                        gp[1] = (int)((Tm - T3 - T4) / T12);
                        gp[2] = (int)(Tm / T22);
                        gp[3] = (int)(T4 / T31);
                        gp[4] = (int)((Tm - T3 - T4) / T32);
                        gp[5] = (int)GJ[2];
                        gp[6] = Tm;
                        gp[7] = T11;
                        gp[8] = T12;
                        gp[9] = T22;
                        gp[10] = T31;
                        gp[11] = T32;
                        gp[12] = T33;
                        return gp;
                    }
                    else
                    {
                        Tm = T4 + T3;
                        gp[0] = (int)((T3 + T4) / T11);
                        gp[1] = 0;
                        gp[2] = (int)GJ[1];
                        gp[3] = (int)(T4 / T31);
                        gp[4] = 0;
                        gp[5] = (int)GJ[2];
                        gp[6] = Tm;
                        gp[7] = T11;
                        gp[8] = T12;
                        gp[9] = T22;
                        gp[10] = T31;
                        gp[11] = T32;
                        gp[12] = T33;
                        return gp;
                    }
                }
            }
            return gp;
        }
        public double[] CNSF(LimitedCondition L)//产能算法 /*测试完毕无误*/
        {

            double wjp = L.Flowinterval.wWallBeat;//节拍，单位小时
            double wnjp = L.Flowinterval.wnWallBeat;
            double njp = L.Flowinterval.nWallBeat;
            double gjp = L.Flowinterval.gWallBeat;
            double gwjp = L.Flowinterval.gwWallBeat;
            double gnjp = L.Flowinterval.gnWallBeat;
            int wm = L.Flowinterval.wMouldAmount;//w模具数量
            int nm = L.Flowinterval.nMouldAmount;
            int gm = L.Flowinterval.gMouldAmount;
            double wf = L.Flowinterval.wMouldReturnTime;//w模具返回时间
            double nf = L.Flowinterval.nMouldReturnTime;
            double gf = L.Flowinterval.gMouldReturnTime;
            int wnsum = L.wWorkPositionAmount;//w工位数量
            int nnsum = L.nWorkPositionAmount;
            int gnsum = L.gWorkPositionAmount;
            double ts = L.TimeSlot;//时间间隙，单位小时

            int wone = (int)(wnsum * (ts + wjp));
            int none = (int)(nnsum * (ts + njp));
            int gone = (int)(gnsum * (ts + gjp));

            double[] jp = new double[6];//节拍
            jp[0] = wjp;
            jp[1] = wnjp;
            jp[2] = njp;
            jp[3] = gjp;
            jp[4] = gwjp;
            jp[5] = gnjp;

            int[] msum = new int[6];//模具总数
            msum[0] = wm;
            msum[1] = wm;
            msum[2] = nm;
            msum[3] = gm;
            msum[4] = gm;
            msum[5] = gm;

            double[] mf = new double[6];//返回时间
            mf[0] = wf;
            mf[1] = wf;
            mf[2] = nf;
            mf[3] = gf;
            mf[4] = gf;
            mf[5] = gf;

            int[] gsum = new int[6];//工位数量
            gsum[0] = wnsum;
            gsum[1] = wnsum;
            gsum[2] = nnsum;
            gsum[3] = gnsum;
            gsum[4] = gnsum;
            gsum[5] = gnsum;

            double[] PP = new double[6];

            int sfi = 0;
            for (; sfi < 6; sfi++)
            {
                if (msum[sfi] > gsum[sfi] && mf[sfi] < jp[sfi])
                {
                    PP[sfi] = 1 / (jp[sfi] + ts);//时产能
                }
                if (msum[sfi] > gsum[sfi] && mf[sfi] > jp[sfi])
                {
                    int k0;
                    k0 = (int)(mf[sfi] / (jp[sfi] + ts)) + 1;
                    PP[sfi] = (msum[sfi] / (msum[sfi] + k0)) * 1 / (jp[sfi] + ts);//时产能
                }
                if (msum[sfi] < gsum[sfi])
                {
                    PP[sfi] = (msum[sfi] * 1) / (gsum[sfi] * (jp[sfi] + ts));//时产能
                }
            }
            return PP;
        }
        public double[] GJHQ(int downf, int n, BatchTask B, int pid, int bid)//获取构件算法 /*测试完毕无误*/
        {
            double[] GJ = new double[3]; //构件数组
            GJ[0] = 0;
            GJ[1] = 0;
            GJ[2] = 0;
            int ci = B.Projects[pid].Buildings[bid].Components.Count;
            int upf = downf + n - 1;
            for (int i = 0; i < ci; i++)
            {
                if (downf <= B.Projects[pid].Buildings[bid].Components[i].Floor && B.Projects[pid].Buildings[bid].Components[i].Floor <= upf)
                {
                    if (B.Projects[pid].Buildings[bid].Components[i].Category == 1)
                    { GJ[0]++; }
                    if (B.Projects[pid].Buildings[bid].Components[i].Category == 2)
                    { GJ[1]++; }
                    if (B.Projects[pid].Buildings[bid].Components[i].Category == 3)
                    { GJ[2]++; }
                }
            }
            return GJ;
        }
    }
}
